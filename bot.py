
# bot3.py ‚Äî –ø–æ–≤–Ω–∏–π —Ä–æ–±–æ—á–∏–π –∫–æ–¥
import asyncio
import json
import datetime
import random
import time
from typing import Dict, Any
from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

# ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==========
# API_TOKEN = "7571579058:AAHgxf2lrxSFVGQUt5Dx9b-PdomNzBxED9Y"  # <--- –ø–æ—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω

import os
API_TOKEN = os.getenv("BOT_TOKEN")
AUTHOR_ID = 1365276193       # <--- —Å–≤—ñ–π Telegram ID (–∞–¥–º—ñ–Ω/–∞–≤—Ç–æ—Ä)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ========== –£–¢–ò–õ–Ü–¢–ò ==========
def load_json(filename: str, default=None):
    """
    –ë–µ–∑–ø–µ—á–Ω–µ —á–∏—Ç–∞–Ω–Ω—è JSON. –Ø–∫—â–æ default –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π dict.
    –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ –π–æ–≥–æ –∑ default-–∑–Ω–∞—á–µ–Ω–Ω—è–º.
    """
    if default is None:
        default = {}
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        # —Å—Ç–≤–æ—Ä–∏–º–æ —Ñ–∞–π–ª –∑ –¥–µ—Ñ–æ–ª—Ç–æ–º —ñ –ø–æ–≤–µ—Ä–Ω–µ–º–æ –π–æ–≥–æ
        try:
            save_json(filename, default)
        except Exception:
            pass
        return default
    except Exception:
        return default


def save_json(filename: str, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def uid_str_from_message(msg: types.Message) -> str:
    return str(msg.from_user.id)

def display_name_from_item(item: Dict[str, Any]) -> str:
    if item.get("from_username"):
        return f"@{item.get('from_username')}"
    return str(item.get("from_id"))

def now_str():
    return str(datetime.datetime.now())

# ========== –î–∞–Ω—ñ ==========
schedule_data = load_json("schedule.json", {})
news_data = load_json("news.json", [])
socials_data = load_json("socials.json", {})
memes_data = load_json("memes.json", [])
pending_data = load_json("pending.json", {"news": [], "memes": [], "score_requests": [], "contact": []})
scores_data = load_json("scores.json", {})
menu_data = load_json("menu.json", {})

# ========== –¢–∏–º—á–∞—Å–æ–≤—ñ —Å—Ç–∞–Ω–∏ ==========
waiting_for: Dict[str, Any] = {}
user_class: Dict[str, str] = {}
last_click: Dict[str, float] = {}
menu_stack: Dict[str, list] = {}

# ========== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ==========
def main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üìÖ –†–æ–∑–∫–ª–∞–¥"), KeyboardButton(text="üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤")],
        [KeyboardButton(text="üì∞ –ù–æ–≤–∏–Ω–∏"), KeyboardButton(text="üòÇ –ú–µ–º–∏")],
        [KeyboardButton(text="üåê –°–æ—Ü–º–µ—Ä–µ–∂—ñ —à–∫–æ–ª–∏"), KeyboardButton(text="üçΩÔ∏è –ú–µ–Ω—é —ó–¥–∞–ª—å–Ω—ñ")],
        [KeyboardButton(text="‚≠ê –ó–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏"), KeyboardButton(text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å"), KeyboardButton(text="‚úâÔ∏è –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—å –∑ –∞–≤—Ç–æ—Ä–æ–º")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º—ñ–Ω-–º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def class_selection_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3"), KeyboardButton(text="4")],
        [KeyboardButton(text="5-–ê"), KeyboardButton(text="5-–ë"), KeyboardButton(text="6"), KeyboardButton(text="7")],
        [KeyboardButton(text="8"), KeyboardButton(text="9"), KeyboardButton(text="10"), KeyboardButton(text="11")]
    ], resize_keyboard=True)

def day_selection_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ü–æ–Ω–µ–¥—ñ–ª–æ–∫"), KeyboardButton(text="–í—ñ–≤—Ç–æ—Ä–æ–∫")],
        [KeyboardButton(text="–°–µ—Ä–µ–¥–∞"), KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä")],
        [KeyboardButton(text="–ü‚Äô—è—Ç–Ω–∏—Ü—è")]
    ], resize_keyboard=True)

def admin_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üëÄ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó")],
        [KeyboardButton(text="üìÖ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥"), KeyboardButton(text="üõçÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")],
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É"), KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É")],
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Å–æ—Ü–º–µ—Ä–µ–∂—É"), KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–æ—Ü–º–µ—Ä–µ–∂—É")],
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –º–µ–Ω—é"), KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω—é")],
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –º–µ–º"), KeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–º")],
        [KeyboardButton(text="‚öñÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def news_user_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üì§ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É"), KeyboardButton(text="üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤–∏–Ω–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def memes_user_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üì§ –î–æ–¥–∞—Ç–∏ –º–µ–º"), KeyboardButton(text="üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–º–∏")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def earn_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ö–ª—ñ–∫–µ—Ä üñ±Ô∏è"), KeyboardButton(text="–ö–∞–º—ñ–Ω—å/–ù–æ–∂–∏—Ü—ñ/–ü–∞–ø—ñ—Ä ‚úÇÔ∏èüìÑü™®")],
        [KeyboardButton(text="üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

# ========== –°—Ç–∞—Ä—Ç ==========
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    uid = str(message.from_user.id)
    users_data = load_json("users.json")

    username = message.from_user.username
    if uid not in users_data:
        users_data[uid] = {
            "name": message.from_user.full_name,
            "username": username if username else "",
            "points": 0
        }
    else:
        # —è–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑'—è–≤–∏–≤—Å—è username ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ
        if username and not users_data[uid].get("username"):
            users_data[uid]["username"] = username

    save_json("users.json", users_data)

    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üëã",
        reply_markup=main_menu(message.from_user.id == AUTHOR_ID)
    )



@dp.message(lambda m: m.text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å")
async def change_class(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "choose_class"
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∫–ª–∞—Å:", reply_markup=class_selection_keyboard())

@dp.message(lambda m: waiting_for.get(str(m.from_user.id)) == "choose_class")
async def set_class(message: types.Message):
    uid = uid_str_from_message(message)
    chosen = message.text.strip()
    if chosen not in ["1","2","3","4","5-–ê","5-–ë","6","7","8","9","10","11","–Ø –≤—á–∏—Ç–µ–ª—å"]:
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return
    user_class[uid] = chosen
    waiting_for.pop(uid, None)
    await message.answer(f"–ö–ª–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {chosen}", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

# ========== –ù–æ–≤–∏–Ω–∏ ==========
@dp.message(lambda m: m.text == "üì∞ –ù–æ–≤–∏–Ω–∏")
async def news_menu(message: types.Message):
    await message.answer("–ù–æ–≤–∏–Ω–∏ ‚Äî –æ–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=news_user_keyboard())

@dp.message(lambda m: m.text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤–∏–Ω–∏")
async def view_news(message: types.Message):
    if not news_data:
        await message.answer("–ü–æ–∫–∏ —â–æ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return
    text = "\n\n".join(f"{i+1}. {n}" for i,n in enumerate(news_data))
    await message.answer("üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n\n" + text, reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

# ========== –ú–µ–º–∏ ==========
@dp.message(lambda m: m.text == "üòÇ –ú–µ–º–∏")
async def memes_menu(message: types.Message):
    await message.answer("–ú–µ–º–∏ ‚Äî –æ–±–µ—Ä–∏:", reply_markup=memes_user_keyboard())

@dp.message(lambda m: m.text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–º–∏")
async def view_memes(message: types.Message):
    if not memes_data:
        await message.answer("–ü–æ–∫–∏ —â–æ –º–µ–º—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return
    for item in memes_data:
        if isinstance(item, dict) and item.get("type") == "photo":
            await message.answer_photo(item["file_id"], caption=item.get("text",""))
        elif isinstance(item, dict) and item.get("type") == "video":
            await message.answer_video(item["file_id"], caption=item.get("text",""))
        elif isinstance(item, dict) and item.get("type") == "voice":
            # —è–∫—â–æ —Ö–æ—á–µ—à –ø—ñ–¥–ø–∏—Å –¥–æ –≥–æ–ª–æ—Å—É ‚Äî –∑–±–µ—Ä—ñ–≥–∞–π text —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π –π–æ–≥–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            if item.get("text"):
                await message.answer(item.get("text"))
            await message.answer_voice(item["file_id"])
        elif isinstance(item, dict) and item.get("type") == "video_note":
            if item.get("text"):
                await message.answer(item.get("text"))
            await message.answer_video_note(item["file_id"])
        else:
            await message.answer(str(item))

    await message.answer('–¶–µ –≤—Å—ñ –º–µ–º–∏, —è–∫—â–æ –º–∞—î—à —è–∫–∏–π—Å—å, –Ω–∞–¥—Å–∏–ª–∞–π –≤ "üì§ –î–æ–¥–∞—Ç–∏ –º–µ–º"\n–í—Å—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ –º–µ–º–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç—É—Ç: https://t.me/arhive_mems', reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

# ========== –†–æ–∑–∫–ª–∞–¥ ==========
@dp.message(lambda m: m.text == "üìÖ –†–æ–∑–∫–ª–∞–¥")
async def ask_day_for_schedule(message: types.Message):
    uid = uid_str_from_message(message)
    if uid not in user_class:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫–ª–∞—Å:", reply_markup=class_selection_keyboard())
        return
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=day_selection_keyboard())

@dp.message(lambda m: m.text in ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫","–í—ñ–≤—Ç–æ—Ä–æ–∫","–°–µ—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä","–ü‚Äô—è—Ç–Ω–∏—Ü—è"])
async def send_schedule(message: types.Message):
    uid = uid_str_from_message(message)
    if uid not in user_class:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫–ª–∞—Å:", reply_markup=class_selection_keyboard())
        return
    cl = user_class[uid]
    lessons = schedule_data.get(cl, {}).get(message.text, "‚ùå –†–æ–∑–∫–ª–∞–¥ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ")
    await message.answer(f"üìÖ –†–æ–∑–∫–ª–∞–¥ –¥–ª—è {cl} ‚Äî {message.text}:\n\n{lessons}", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

@dp.message(lambda m: m.text == "üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤")
async def bell_schedule(message: types.Message):
    text = ("üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤:\n"
        "1 —É—Ä–æ–∫: 08:30 ‚Äì 09:15\n"
        "2 —É—Ä–æ–∫: 09:25 ‚Äì 10:10\n"
        "3 —É—Ä–æ–∫: 10:20 ‚Äì 11:05\n"
        "4 —É—Ä–æ–∫: 11:25 ‚Äì 12:10\n"
        "5 —É—Ä–æ–∫: 12:30 ‚Äì 13:15\n"
        "6 —É—Ä–æ–∫: 13:25 ‚Äì 14:10\n"
        "7 —É—Ä–æ–∫: 14:20 ‚Äì 15:05\n"
        "8 —É—Ä–æ–∫: 15:15 - 16:00")
    await message.answer(text, reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

# ========== –ù–æ–≤–∏–Ω–∏ ==========
@dp.message(lambda m: m.text == "üì∞ –ù–æ–≤–∏–Ω–∏")
async def news_menu(message: types.Message):
    await message.answer("–ù–æ–≤–∏–Ω–∏ ‚Äî –æ–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=news_user_keyboard())

@dp.message(lambda m: m.text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤–∏–Ω–∏")
async def view_news(message: types.Message):
    if not news_data:
        await message.answer("–ü–æ–∫–∏ —â–æ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return
    text = "\n\n".join(f"{i+1}. {n}" for i,n in enumerate(news_data))
    await message.answer("üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n\n" + text, reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

@dp.message(lambda m: m.text == "üì§ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É")
async def user_add_news_prompt(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "user_add_news"
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ (–≤–æ–Ω–∞ –ø—ñ–¥–µ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# –ê–¥–º—ñ–Ω ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –≤—ñ–¥—Ä–∞–∑—É
@dp.message(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É" and m.from_user.id == AUTHOR_ID)
async def admin_add_news_prompt(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "admin_add_news"
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ (–≤–æ–Ω–æ –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Å—Ç—å—Å—è):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É (–∞–¥–º—ñ–Ω)
@dp.message(lambda m: m.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É" and m.from_user.id == AUTHOR_ID)
async def admin_delete_news_prompt(message: types.Message):
    if not news_data:
        await message.answer("–ü–æ–∫–∏ —â–æ –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î.", reply_markup=admin_menu_keyboard())
        return
    text = "–°–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω:\n" + "\n".join(f"{i+1}. {n}" for i,n in enumerate(news_data))
    waiting_for[str(message.from_user.id)] = "admin_delete_news"
    await message.answer(text + "\n\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# ========== –ú–∞–≥–∞–∑–∏–Ω ==========
shop_data = load_json("shop.json", {"file_id": None, "caption": ""})

@dp.message(lambda m: m.text == "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
async def open_shop(message: types.Message):
    if shop_data.get("file_id"):
        # –ø–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
        await message.answer_photo(shop_data["file_id"], caption=shop_data.get("caption", ""))
    else:
        await message.answer("–ú–∞–≥–∞–∑–∏–Ω —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.")

# =======–º–∞–≥–∞–∑–∏–Ω –∞–¥–º—ñ–Ω=========
@dp.message(lambda m: m.text == "üõçÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω" and m.from_user.id == AUTHOR_ID)
async def admin_change_shop(message: types.Message):
    waiting_for[str(message.from_user.id)] = "set_shop_photo"
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ –º–∞–≥–∞–∑–∏–Ω—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º.")

@dp.message(lambda m: waiting_for.get(str(m.from_user.id)) == "set_shop_photo" and (m.photo or m.document))
async def save_shop_photo(message: types.Message):
    uid = str(message.from_user.id)
    waiting_for.pop(uid, None)

    if message.photo:
        file_id = message.photo[-1].file_id
    else:
        file_id = message.document.file_id

    shop_data["file_id"] = file_id
    shop_data["caption"] = message.caption or ""
    save_json("shop.json", shop_data)

    await message.answer("‚úÖ –§–æ—Ç–æ –º–∞–≥–∞–∑–∏–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())

# ========== –ú–µ–º–∏ ==========
@dp.message(lambda m: m.text == "üòÇ –ú–µ–º–∏")
async def memes_menu(message: types.Message):
    await message.answer("–ú–µ–º–∏ ‚Äî –æ–±–µ—Ä–∏:", reply_markup=memes_user_keyboard())

@dp.message(lambda m: m.text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–º–∏")
async def view_memes(message: types.Message):
    if not memes_data:
        await message.answer("–ü–æ–∫–∏ —â–æ –º–µ–º—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return
    for item in memes_data:
        if isinstance(item, dict) and item.get("type") == "photo":
            await message.answer_photo(item["file_id"], caption=item.get("text",""))
        elif isinstance(item, dict) and item.get("type") == "video":
            await message.answer_video(item["file_id"], caption=item.get("text",""))
        else:
            await message.answer(str(item))
    await message.answer('–¶–µ –≤—Å—ñ –º–µ–º–∏, —è–∫—â–æ –º–∞—î—à —è–∫–∏–π—Å—å, –Ω–∞–¥—Å–∏–ª–∞–π –≤ "üì§ –î–æ–¥–∞—Ç–∏ –º–µ–º"\n–í—Å—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ –º–µ–º–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç—É—Ç: https://t.me/arhive_mems', reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

@dp.message(lambda m: m.text == "üì§ –î–æ–¥–∞—Ç–∏ –º–µ–º")
async def user_add_meme_prompt(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "user_add_meme"
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –º–µ–º—É –∞–±–æ —Ç–µ–∫—Å—Ç (–ø—ñ–¥–ø–∏—à–∏—Å—å, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å). –í–æ–Ω–æ –ø—ñ–¥–µ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# –ê–¥–º—ñ–Ω ‚Äî –¥–æ–¥–∞—Ç–∏ –º–µ–º –æ–¥—Ä–∞–∑—É
@dp.message(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –º–µ–º" and m.from_user.id == AUTHOR_ID)
async def admin_add_meme_prompt(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "admin_add_meme"
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –º–µ–º—É –∞–±–æ —Ç–µ–∫—Å—Ç (–≤–æ–Ω–æ –æ–¥—Ä–∞–∑—É –¥–æ–¥–∞—Å—Ç—å—Å—è):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# –í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–º (–∞–¥–º—ñ–Ω)
@dp.message(lambda m: m.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–º" and m.from_user.id == AUTHOR_ID)
async def admin_delete_meme_prompt(message: types.Message):
    if not memes_data:
        await message.answer("–ü–æ–∫–∏ —â–æ –º–µ–º—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=admin_menu_keyboard())
        return
    text_lines = []
    for i, item in enumerate(memes_data):
        if isinstance(item, dict) and item.get("type") == "photo":
            text_lines.append(f"{i+1}. [–§–û–¢–û] {item.get('text','')[:30]}")
        elif isinstance(item, dict) and item.get("type") == "video":
            text_lines.append(f"{i+1}. [–í–Ü–î–ï–û] {item.get('text','')[:30]}")
        else:
            text_lines.append(f"{i+1}. {str(item)[:40]}")
    waiting_for[str(message.from_user.id)] = "admin_delete_meme"
    await message.answer("–°–ø–∏—Å–æ–∫ –º–µ–º—ñ–≤:\n" + "\n".join(text_lines) + "\n\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –º–µ–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# ========== –°–æ—Ü–º–µ—Ä–µ–∂—ñ ==========
@dp.message(lambda m: m.text == "üåê –°–æ—Ü–º–µ—Ä–µ–∂—ñ —à–∫–æ–ª–∏")
async def show_socials(message: types.Message):
    if not socials_data:
        await message.answer("–ü–æ–∫–∏ —â–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –Ω–µ–º–∞—î.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return
    text = "–ù–∞—à—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:\n" + "\n".join(f"{k}: {v}" for k,v in socials_data.items())
    await message.answer(text, reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

@dp.message(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Å–æ—Ü–º–µ—Ä–µ–∂—É" and m.from_user.id == AUTHOR_ID)
async def admin_add_social_prompt(message: types.Message):
    waiting_for[str(message.from_user.id)] = "admin_add_social"
    await message.answer("–í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ù–∞–∑–≤–∞ | –ü–æ—Å–∏–ª–∞–Ω–Ω—è", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

@dp.message(lambda m: m.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–æ—Ü–º–µ—Ä–µ–∂—É" and m.from_user.id == AUTHOR_ID)
async def admin_delete_social_prompt(message: types.Message):
    if not socials_data:
        await message.answer("–°–æ—Ü–º–µ—Ä–µ–∂ –ø–æ–∫–∏ –Ω–µ–º–∞—î.", reply_markup=admin_menu_keyboard())
        return
    text = "–°–ø–∏—Å–æ–∫ —Å–æ—Ü–º–µ—Ä–µ–∂:\n" + "\n".join(f"{i+1}. {name}: {link}" for i, (name, link) in enumerate(socials_data.items()))
    waiting_for[str(message.from_user.id)] = "admin_delete_social"
    await message.answer(text + "\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∞–±–æ –Ω–æ–º–µ—Ä —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

@dp.message(lambda m: m.text == "‚öñÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –±–∞–ª–∏" and m.from_user.id == AUTHOR_ID)
async def admin_change_points(message: types.Message):
    users_data = load_json("users.json")
    if not users_data:
        await message.answer("–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n"
    for uid, info in users_data.items():
        uname = f"@{info['username']}" if info.get("username") else f"ID:{uid}"
        text += f"{uname}\nüë§ {info.get('name','–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\nüèÜ –ë–∞–ª–∏: {info.get('points',0)}\n\n"

    waiting_for[str(message.from_user.id)] = "admin_change_points"
    await message.answer(
        text + "‚úçÔ∏è –í–≤–µ–¥–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n`ID +10` –∞–±–æ `@username -5`",
        parse_mode="Markdown"
    )


# ========== –ú–µ–Ω—é —ó–¥–∞–ª—å–Ω—ñ ==========
@dp.message(lambda m: m.text == "üçΩÔ∏è –ú–µ–Ω—é —ó–¥–∞–ª—å–Ω—ñ")
async def show_menu(message: types.Message):
    today = str(datetime.date.today())
    info = menu_data.get(today)
    if not info:
        await message.answer("‚ùå –ú–µ–Ω—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return
    if info.get("photo"):
        await message.answer_photo(info["photo"], caption=info.get("text",""), reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
    else:
        await message.answer(f"üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ {today}:\n\n{info.get('text','')}", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

@dp.message(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –º–µ–Ω—é" and m.from_user.id == AUTHOR_ID)
async def admin_add_menu_prompt(message: types.Message):
    waiting_for[str(message.from_user.id)] = "admin_add_menu"
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –º–µ–Ω—é –∞–±–æ —Ñ–æ—Ç–æ (–≤–æ–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

@dp.message(lambda m: m.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –º–µ–Ω—é" and m.from_user.id == AUTHOR_ID)
async def admin_delete_menu_today(message: types.Message):
    today = str(datetime.date.today())
    if today in menu_data:
        del menu_data[today]
        save_json("menu.json", menu_data)
        await message.answer("–ú–µ–Ω—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    else:
        await message.answer("–ú–µ–Ω—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—î.", reply_markup=admin_menu_keyboard())

# ========== –ó–≤'—è–∑–æ–∫ –∑ –∞–≤—Ç–æ—Ä–æ–º ==========
@dp.message(lambda m: m.text == "‚úâÔ∏è –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—å –∑ –∞–≤—Ç–æ—Ä–æ–º")
async def contact_author(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "contact_author"
    await message.answer("–ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º). –í–æ–Ω–æ –ø—ñ–¥–µ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# ========== –ó–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏ (–∫–ª—ñ–∫–µ—Ä, RPS, –∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞–ª–∏) ==========
@dp.message(lambda m: m.text == "‚≠ê –ó–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏")
async def earn_menu(message: types.Message):
    uid = uid_str_from_message(message)
    bal = scores_data.get(uid, 0)
    await message.answer(f"–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {bal} ‚≠ê\n–û–±–µ—Ä–∏ —Å–ø–æ—Å—ñ–±:", reply_markup=earn_menu_keyboard())

# –ö–ª—ñ–∫–µ—Ä
@dp.message(lambda m: m.text == "–ö–ª—ñ–∫–µ—Ä üñ±Ô∏è")
async def clicker_start(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "clicker_mode"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ù–∞—Ç–∏—Å–Ω—É—Ç–∏!")],[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer("–ù–∞—Ç–∏—Å–Ω–∏ '–ù–∞—Ç–∏—Å–Ω—É—Ç–∏!'. –û–ø–ª–∞—Ç–∞ —Ä–∞–∑ –Ω–∞ 60s (0.3‚Äì1.0‚≠ê).", reply_markup=kb)

@dp.message(lambda m: m.text == "–ù–∞—Ç–∏—Å–Ω—É—Ç–∏!")
async def clicker_press(message: types.Message):
    uid = uid_str_from_message(message)
    if waiting_for.get(uid) != "clicker_mode": return
    now = time.time()
    if now - last_click.get(uid,0) < 60:
        rem = int(60 - (now - last_click.get(uid,0)))
        await message.answer(f"–ü–æ—á–µ–∫–∞–π {rem}s –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫–ª—ñ–∫–æ–º.")
        return
    gain = round(random.uniform(0.3,1.0),2)
    scores_data[uid] = round(scores_data.get(uid,0) + gain,2)
    save_json("scores.json", scores_data)
    last_click[uid] = now
    await message.answer(f"–û—Ç—Ä–∏–º–∞–Ω–æ +{gain}‚≠ê. –ë–∞–ª–∞–Ω—Å: {scores_data[uid]}‚≠ê")

# RPS
@dp.message(lambda m: m.text and m.text.startswith("–ö–∞–º—ñ–Ω—å/–ù–æ–∂–∏—Ü—ñ/–ü–∞–ø—ñ—Ä"))
async def rps_prompt(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "rps_waiting_bet"
    await message.answer("–í–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É –≤ –±–∞–ª–∞—Ö (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

@dp.message(lambda m: waiting_for.get(str(m.from_user.id)) == "rps_waiting_bet")
async def rps_receive_bet(message: types.Message):
    uid = uid_str_from_message(message)
    try:
        bet = float(message.text.strip())
    except Exception:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1).")
        return
    if bet <= 0 or bet > scores_data.get(uid,0):
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞–≤–∫–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤.")
        return
    waiting_for[uid] = {"action":"rps_choose","bet":bet}
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ö–∞–º—ñ–Ω—å"),KeyboardButton(text="–ù–æ–∂–∏—Ü—ñ"),KeyboardButton(text="–ü–∞–ø—ñ—Ä")],[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å: –ö–∞–º—ñ–Ω—å / –ù–æ–∂–∏—Ü—ñ / –ü–∞–ø—ñ—Ä", reply_markup=kb)

@dp.message(lambda m: isinstance(waiting_for.get(str(m.from_user.id)), dict) and waiting_for.get(str(m.from_user.id)).get("action") == "rps_choose")
async def rps_choose(message: types.Message):
    uid = uid_str_from_message(message)
    mapping = {"–∫–∞–º—ñ–Ω—å":"rock","–Ω–æ–∂–∏—Ü—ñ":"scissors","–ø–∞–ø—ñ—Ä":"paper",
               "rock":"rock","scissors":"scissors","paper":"paper"}
    choice = message.text.strip().lower()
    if choice not in mapping:
        await message.answer("–í–∏–±–µ—Ä–∏ '–ö–∞–º—ñ–Ω—å', '–ù–æ–∂–∏—Ü—ñ' –∞–±–æ '–ü–∞–ø—ñ—Ä'.")
        return
    user_choice = mapping[choice]
    bot_choice = random.choice(["rock","scissors","paper"])
    bet = float(waiting_for[uid]["bet"])
    wins = {("rock","scissors"), ("scissors","paper"), ("paper","rock")}
    if user_choice == bot_choice:
        result_text = "–ù—ñ—á–∏—è. –°—Ç–∞–≤–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è."
    elif (user_choice, bot_choice) in wins:
        scores_data[uid] = round(scores_data.get(uid,0) + bet,2)
        result_text = f"–¢–∏ –≤–∏–≥—Ä–∞–≤! +{bet}‚≠ê"
    else:
        scores_data[uid] = round(scores_data.get(uid,0) - bet,2)
        result_text = f"–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤. -{bet}‚≠ê"
    save_json("scores.json", scores_data)
    waiting_for.pop(uid, None)
    await message.answer(f"–¢–≤—ñ–π –≤–∏–±—ñ—Ä: {user_choice}\n–ë–æ—Ç: {bot_choice}\n{result_text}\n–ë–∞–ª–∞–Ω—Å: {scores_data.get(uid,0)}‚≠ê", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

# –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É (–º–æ–∂–Ω–∞ —Ñ–æ—Ç–æ+—Ç–µ–∫—Å—Ç)
@dp.message(lambda m: m.text == "üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É")
async def send_score_request_prompt(message: types.Message):
    uid = uid_str_from_message(message)
    waiting_for[uid] = "submit_grade"
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ –∑–∞—è–≤–∫—É –∑ –æ–ø–∏—Å–æ–º —Ç–∞ (–æ–ø—Ü—ñ–π–Ω–æ) —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ (–ø—ñ–¥–ø–∏—à–∏).", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

# ========== –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å ==========
@dp.message(lambda m: m.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω-–º–µ–Ω—é" and m.from_user.id == AUTHOR_ID)
async def admin_panel(message: types.Message):
    await message.answer("‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu_keyboard())

@dp.message(lambda m: m.text == "üëÄ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó" and m.from_user.id == AUTHOR_ID)
async def admin_check_pending(message: types.Message):
    counts = {
        "news": len(pending_data.get("news", [])),
        "memes": len(pending_data.get("memes", [])),
        "scores": len(pending_data.get("score_requests", [])),
        "contact": len(pending_data.get("contact", []))
    }
    text = (f"–û—á—ñ–∫—É—é—Ç—å –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É:\n"
            f"–ù–æ–≤–∏–Ω–∏: {counts['news']}\n–ú–µ–º–∏: {counts['memes']}\n–ó–∞—è–≤–∫–∏ –Ω–∞ –±–∞–ª–∏: {counts['scores']}\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É: {counts['contact']}")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤–∏–Ω–∏", callback_data="admin_pending_news")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–º–∏", callback_data="admin_pending_memes")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –±–∞–ª–∏", callback_data="admin_pending_scores")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É", callback_data="admin_pending_contact")]
    ])
    await message.answer(text, reply_markup=kb)

# –Ü–Ω—à—ñ –∞–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏: –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–º/–Ω–æ–≤–∏–Ω—É/—Ä–æ–∑–∫–ª–∞–¥ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –Ω–∏–∂—á–µ —É generic_handler –∞–±–æ –æ–∫—Ä–µ–º–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö

# ========== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É –∞–¥–º—ñ–Ω—É (—Ñ—É–Ω–∫—Ü—ñ—ó) ==========
async def send_next_pending_news_to_admin(chat_id: int):
    items = pending_data.get("news", [])
    if not items:
        await bot.send_message(chat_id, "–ù–µ–º–∞ –Ω–æ–≤–∏–Ω –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=admin_menu_keyboard())
        return
    item = items[0]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="approve_news"),
         InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="reject_news")]
    ])
    header = f"üì£ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –Ω–æ–≤–∏–Ω—É –≤—ñ–¥ {item.get('from_username') or item.get('from_id')} ({item.get('time')}):\n\n"
    if item.get("type") == "photo":
        await bot.send_photo(chat_id, item["file_id"], caption=header + (item.get("text","")), reply_markup=kb)
    elif item.get("type") == "video":
        await bot.send_video(chat_id, item["file_id"], caption=header + (item.get("text","")), reply_markup=kb)
    elif item.get("type") == "voice":
        await bot.send_message(chat_id, header + (item.get("text","")))
        await bot.send_voice(chat_id, item["file_id"], reply_markup=kb)
    elif item.get("type") == "video_note":
        await bot.send_message(chat_id, header + (item.get("text","")))
        await bot.send_video_note(chat_id, item["file_id"], reply_markup=kb)
    else:
        await bot.send_message(chat_id, header + item.get("text",""), reply_markup=kb)


async def send_next_pending_meme_to_admin(chat_id: int):
    items = pending_data.get("memes", [])
    if not items:
        await bot.send_message(chat_id, "–ù–µ–º–∞ –º–µ–º—ñ–≤ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=admin_menu_keyboard())
        return
    item = items[0]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="approve_meme"),
         InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="reject_meme")]
    ])
    if item.get("type") == "photo":
        await bot.send_photo(chat_id, item["file_id"], caption=f"–ú–µ–º –≤—ñ–¥ {display_name_from_item(item)}\n{item.get('text','')}", reply_markup=kb)
    elif item.get("type") == "video":
        await bot.send_video(chat_id, item["file_id"], caption=f"–ú–µ–º –≤—ñ–¥ {display_name_from_item(item)}\n{item.get('text','')}", reply_markup=kb)
    elif item.get("type") == "voice":
        await bot.send_message(chat_id, f"–ú–µ–º (–≥–æ–ª–æ—Å) –≤—ñ–¥ {display_name_from_item(item)}")
        await bot.send_voice(chat_id, item["file_id"], reply_markup=kb)
    elif item.get("type") == "video_note":
        await bot.send_message(chat_id, f"–ú–µ–º (–≤—ñ–¥–µ–æ-–∫—Ä—É–∂–æ–∫) –≤—ñ–¥ {display_name_from_item(item)}")
        await bot.send_video_note(chat_id, item["file_id"], reply_markup=kb)

    else:
        await bot.send_message(chat_id, f"–ú–µ–º –≤—ñ–¥ {display_name_from_item(item)}:\n{item.get('text')}", reply_markup=kb)

async def send_next_pending_score_to_admin(chat_id: int):
    items = pending_data.get("score_requests", [])
    if not items:
        await bot.send_message(chat_id, "–ù–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∞–ª–∏.", reply_markup=admin_menu_keyboard())
        return
    item = items[0]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —ñ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏", callback_data="approve_score"),
         InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="reject_score")]
    ])
    if item.get("type") == "photo":
        await bot.send_photo(chat_id, item["file_id"], caption=f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {display_name_from_item(item)}\n{item.get('text','')}", reply_markup=kb)
    elif item.get("type") == "video":
        await bot.send_video(chat_id, item["file_id"], caption=f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {display_name_from_item(item)}\n{item.get('text','')}", reply_markup=kb)
    elif item.get("type") == "voice":
        await bot.send_message(chat_id, f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ (–≥–æ–ª–æ—Å) –≤—ñ–¥ {display_name_from_item(item)}")
        await bot.send_voice(chat_id, item["file_id"], reply_markup=kb)
    elif item.get("type") == "video_note":
        await bot.send_message(chat_id, f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ (–≤—ñ–¥–µ–æ-–∫—Ä—É–∂–æ–∫) –≤—ñ–¥ {display_name_from_item(item)}")
        await bot.send_video_note(chat_id, item["file_id"], reply_markup=kb)
    else:
        await bot.send_message(chat_id, f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {display_name_from_item(item)}:\n{item.get('text')}", reply_markup=kb)

async def send_next_pending_contact_to_admin(chat_id: int):
    items = pending_data.get("contact", [])
    if not items:
        await bot.send_message(chat_id, "–ù–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–≤—Ç–æ—Ä—É.", reply_markup=admin_menu_keyboard())
        return
    item = items[0]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", callback_data="reply_contact"),
         InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data="reject_contact")]
    ])
    if item.get("type") == "photo":
        await bot.send_photo(chat_id, item["file_id"], caption=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {display_name_from_item(item)}\n{item.get('text','')}", reply_markup=kb)
    elif item.get("type") == "video":
        await bot.send_video(chat_id, item["file_id"], caption=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {display_name_from_item(item)}\n{item.get('text','')}", reply_markup=kb)
    elif item.get("type") == "voice":
        await bot.send_message(chat_id, f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ (–≥–æ–ª–æ—Å) –≤—ñ–¥ {display_name_from_item(item)}")
        await bot.send_voice(chat_id, item["file_id"], reply_markup=kb)
    elif item.get("type") == "video_note":
        await bot.send_message(chat_id, f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ (–≤—ñ–¥–µ–æ-–∫—Ä—É–∂–æ–∫) –≤—ñ–¥ {display_name_from_item(item)}")
        await bot.send_video_note(chat_id, item["file_id"], reply_markup=kb)
    else:
        await bot.send_message(chat_id, f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {display_name_from_item(item)}:\n{item.get('text')}", reply_markup=kb)

# ========== CALLBACKS –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —á–µ—Ä–≥ ==========
@dp.callback_query(lambda c: c.data == "admin_pending_news" and c.from_user.id == AUTHOR_ID)
async def cb_admin_pending_news(cb: types.CallbackQuery):
    await send_next_pending_news_to_admin(cb.from_user.id)
    await cb.answer()

@dp.callback_query(lambda c: c.data == "admin_pending_memes" and c.from_user.id == AUTHOR_ID)
async def cb_admin_pending_memes(cb: types.CallbackQuery):
    await send_next_pending_meme_to_admin(cb.from_user.id)
    await cb.answer()

@dp.callback_query(lambda c: c.data == "admin_pending_scores" and c.from_user.id == AUTHOR_ID)
async def cb_admin_pending_scores(cb: types.CallbackQuery):
    await send_next_pending_score_to_admin(cb.from_user.id)
    await cb.answer()

@dp.callback_query(lambda c: c.data == "admin_pending_contact" and c.from_user.id == AUTHOR_ID)
async def cb_admin_pending_contact(cb: types.CallbackQuery):
    await send_next_pending_contact_to_admin(cb.from_user.id)
    await cb.answer()

# ========== CALLBACKS: –î—ñ—ó –ø–æ —á–µ—Ä–∑—ñ (approve/reject) ==========
# –ù–æ–≤–∏–Ω–∏
@dp.callback_query(lambda c: c.data == "approve_news" and c.from_user.id == AUTHOR_ID)
async def cb_approve_news(cb: types.CallbackQuery):
    items = pending_data.get("news", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –Ω–æ–≤–∏–Ω.", show_alert=True)
        return
    item = items.pop(0)
    news_data.append(item["text"])
    save_json("news.json", news_data)
    save_json("pending.json", pending_data)
    # –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞
    try:
        await bot.send_message(item["from_id"], "–í–∞—à–∞ –Ω–æ–≤–∏–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —Ç–∞ –¥–æ–¥–∞–Ω–∞. –î—è–∫—É—î–º–æ!")
    except Exception:
        pass
    # –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
    if pending_data.get("news"):
        await send_next_pending_news_to_admin(cb.from_user.id)
    else:
        await bot.send_message(cb.from_user.id, "–í—Å—ñ –Ω–æ–≤–∏–Ω–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    await cb.answer("–ù–æ–≤–∏–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")

@dp.callback_query(lambda c: c.data == "reject_news" and c.from_user.id == AUTHOR_ID)
async def cb_reject_news(cb: types.CallbackQuery):
    items = pending_data.get("news", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –Ω–æ–≤–∏–Ω.", show_alert=True)
        return
    item = items.pop(0)
    save_json("pending.json", pending_data)
    try:
        await bot.send_message(item["from_id"], "–í–∞—à–∞ –Ω–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    if pending_data.get("news"):
        await send_next_pending_news_to_admin(cb.from_user.id)
    else:
        await bot.send_message(cb.from_user.id, "–í—Å—ñ –Ω–æ–≤–∏–Ω–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    await cb.answer("–ù–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")

# –ú–µ–º–∏
@dp.callback_query(lambda c: c.data == "approve_meme" and c.from_user.id == AUTHOR_ID)
async def cb_approve_meme(cb: types.CallbackQuery):
    items = pending_data.get("memes", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –º–µ–º—ñ–≤.", show_alert=True)
        return

    # –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –º–µ–º —ñ–∑ —á–µ—Ä–≥–∏
    item = items.pop(0)

    # –¥–æ–¥–∞—î–º–æ —É memes_data –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
    if item.get("type") == "photo":
        memes_data.append({
            "type": "photo",
            "file_id": item["file_id"],
            "text": item.get("text", "")
        })
    elif item.get("type") == "video":
        memes_data.append({
            "type": "video",
            "file_id": item["file_id"],
            "text": item.get("text", "")
        })
    else:
        memes_data.append(item.get("text", ""))

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª–∏
    save_json("memes.json", memes_data)
    save_json("pending.json", pending_data)

    # –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await bot.send_message(item["from_id"], "‚úÖ –í–∞—à –º–µ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —ñ –¥–æ–¥–∞–Ω–æ!")
    except Exception:
        pass

    # –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º–µ–º –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
    if pending_data.get("memes"):
        await send_next_pending_meme_to_admin(cb.from_user.id)
    else:
        await bot.send_message(cb.from_user.id, "–í—Å—ñ –º–µ–º–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())

    await cb.answer("–ú–µ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")


@dp.callback_query(lambda c: c.data == "reject_meme" and c.from_user.id == AUTHOR_ID)
async def cb_reject_meme(cb: types.CallbackQuery):
    items = pending_data.get("memes", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –º–µ–º—ñ–≤.", show_alert=True)
        return
    item = items.pop(0)
    save_json("pending.json", pending_data)
    try:
        await bot.send_message(item["from_id"], "–í–∞—à –º–µ–º –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    if pending_data.get("memes"):
        await send_next_pending_meme_to_admin(cb.from_user.id)
    else:
        await bot.send_message(cb.from_user.id, "–í—Å—ñ –º–µ–º–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    await cb.answer("–ú–µ–º –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

# –ó–∞—è–≤–∫–∏ –Ω–∞ –±–∞–ª–∏
@dp.callback_query(lambda c: c.data == "approve_score" and c.from_user.id == AUTHOR_ID)
async def cb_approve_score(cb: types.CallbackQuery):
    items = pending_data.get("score_requests", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –∑–∞—è–≤–æ–∫.", show_alert=True)
        return
    # –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π, –∞–ª–µ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –æ–¥—Ä–∞–∑—É ‚Äî –ø—Ä–æ—Å–∏–º–æ –∞–¥–º—ñ–Ω–∞ –≤–≤–µ—Å—Ç–∏ —Å—É–º—É
    item = items.pop(0)
    save_json("pending.json", pending_data)
    admin_uid = str(cb.from_user.id)
    waiting_for[admin_uid] = {"action":"admin_confirm_score", "target_id": item["from_id"], "target_display": item.get("from_username") or str(item.get("from_id"))}
    await bot.send_message(cb.from_user.id, f"–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–∫—ñ–ª—å–∫–∏ –±–∞–ª—ñ–≤ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {waiting_for[admin_uid]['target_display']} (—á–∏—Å–ª–æ).", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))
    await cb.answer()

@dp.callback_query(lambda c: c.data == "reject_score" and c.from_user.id == AUTHOR_ID)
async def cb_reject_score(cb: types.CallbackQuery):
    items = pending_data.get("score_requests", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –∑–∞—è–≤–æ–∫.", show_alert=True)
        return
    item = items.pop(0)
    save_json("pending.json", pending_data)
    try:
        await bot.send_message(item["from_id"], "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –±–∞–ª–∏ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception:
        pass
    if pending_data.get("score_requests"):
        await send_next_pending_score_to_admin(cb.from_user.id)
    else:
        await bot.send_message(cb.from_user.id, "–í—Å—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –±–∞–ª–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    await cb.answer("–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É (contact)
@dp.callback_query(lambda c: c.data == "reply_contact" and c.from_user.id == AUTHOR_ID)
async def cb_reply_contact(cb: types.CallbackQuery):
    items = pending_data.get("contact", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", show_alert=True)
        return
    item = items[0]  # –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ —â–µ ‚Äî –¥–æ—á–µ–∫–∞—î–º–æ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω–∞: –≤—ñ–Ω –º–∞—î –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ, —è–∫–∏–π –º–∏ –ø–æ—Ç—ñ–º –Ω–∞–¥—ñ—à–ª–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    waiting_for[str(cb.from_user.id)] = {"action":"admin_reply_contact", "target_id": item["from_id"]}
    await bot.send_message(cb.from_user.id, f"–í–≤–µ–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {display_name_from_item(item)} (–º–æ–∂–Ω–∞ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º).")
    await cb.answer()

@dp.callback_query(lambda c: c.data == "reject_contact" and c.from_user.id == AUTHOR_ID)
async def cb_reject_contact(cb: types.CallbackQuery):
    items = pending_data.get("contact", [])
    if not items:
        await cb.answer("–ù–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", show_alert=True)
        return
    item = items.pop(0)
    save_json("pending.json", pending_data)
    try:
        await bot.send_message(item["from_id"], "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥—Ö–∏–ª–∏–≤.")
    except Exception:
        pass
    if pending_data.get("contact"):
        await send_next_pending_contact_to_admin(cb.from_user.id)
    else:
        await bot.send_message(cb.from_user.id, "–í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ.", reply_markup=admin_menu_keyboard())
    await cb.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

# ========== –û–±—Ä–æ–±–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–ª–∏ waiting_for –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π ==========
@dp.message()
async def generic_handler(message: types.Message):
    uid = uid_str_from_message(message)
    text = message.text or ""
    state = waiting_for.get(uid)

    if state == "admin_change_points" and message.from_user.id == AUTHOR_ID:
        try:
            key, diff = text.split()
            diff = int(diff)

            users_data = load_json("users.json")

            # —à—É–∫–∞—î–º–æ –ø–æ ID –∞–±–æ –ø–æ username
            target_uid = None
            if key.isdigit() and key in users_data:
                target_uid = key
            else:
                for uid, info in users_data.items():
                    if info.get("username") and ("@" + info["username"]) == key:
                        target_uid = uid
                        break

            if not target_uid:
                await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return

            users_data[target_uid]["points"] = users_data[target_uid].get("points", 0) + diff
            save_json("users.json", users_data)

            waiting_for.pop(str(message.from_user.id), None)
            await message.answer(
                f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ! –£ {users_data[target_uid].get('name')} —Ç–µ–ø–µ—Ä {users_data[target_uid]['points']} –±–∞–ª—ñ–≤.",
                reply_markup=admin_menu_keyboard()
            )
        except Exception:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: `ID +10` –∞–±–æ `@username -5`")
        return


    # –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        waiting_for.pop(uid, None)
        stack = menu_stack.get(uid, [])
        if stack:
            prev_menu = stack.pop()  # –±–µ—Ä–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é
            await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –Ω–∞–∑–∞–¥.", reply_markup=prev_menu)
        else:
            await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        menu_stack[uid] = stack
        return


        # ADMIN: –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–æ—Ü–º–µ—Ä–µ–∂—É
    if state == "admin_delete_social" and message.from_user.id == AUTHOR_ID:
        try:
            key = text.strip()
            if key.isdigit():
                idx = int(key) - 1
                name = list(socials_data.keys())[idx]
            else:
                name = key
            removed = socials_data.pop(name)
            save_json("socials.json", socials_data)
            waiting_for.pop(uid, None)
            await message.answer(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å–æ—Ü–º–µ—Ä–µ–∂—É: {name} ({removed})", reply_markup=admin_menu_keyboard())
        except Exception:
            await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è.")
        return

    # USER: –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É (–π–¥–µ —É pending)
    if state == "user_add_news":
        item = {"from_id": int(message.from_user.id), "from_username": message.from_user.username, "time": now_str()}
        if message.photo:
            item.update({"type":"photo", "file_id": message.photo[-1].file_id, "text": message.caption or ""})
        elif message.video:
            item.update({"type":"video", "file_id": message.video.file_id, "text": message.caption or ""})
        elif message.voice:
            item.update({"type":"voice", "file_id": message.voice.file_id, "text": ""})
        elif message.video_note:
            item.update({"type":"video_note", "file_id": message.video_note.file_id, "text": ""})
        else:
            item.update({"type":"text", "text": text})
        pending_data.setdefault("news", []).append(item)
        save_json("pending.json", pending_data)
        waiting_for.pop(uid, None)
        await message.answer("–î—è–∫—É—é! –¢–≤–æ—è –Ω–æ–≤–∏–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return


    # ADMIN: –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É –æ–¥—Ä–∞–∑—É
    if state == "admin_add_news" and message.from_user.id == AUTHOR_ID:
        news_data.append(text)
        save_json("news.json", news_data)
        waiting_for.pop(uid, None)
        await message.answer("–ù–æ–≤–∏–Ω–∞ –¥–æ–¥–∞–Ω–∞.", reply_markup=admin_menu_keyboard())
        return

    # USER: –¥–æ–¥–∞—Ç–∏ –º–µ–º (–º–æ–∂–Ω–∞ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/—Ç–µ–∫—Å—Ç)
    if state == "user_add_meme":
        item = {"from_id": int(message.from_user.id), "from_username": message.from_user.username, "time": now_str()}
        if message.photo:
            item.update({"type":"photo", "file_id": message.photo[-1].file_id, "text": message.caption or ""})
        elif message.video:
            item.update({"type":"video", "file_id": message.video.file_id, "text": message.caption or ""})
        elif message.voice:
            item.update({"type":"voice", "file_id": message.voice.file_id, "text": ""})
        elif message.video_note:
            item.update({"type":"video_note", "file_id": message.video_note.file_id, "text": ""})
        else:
            item.update({"type":"text", "text": text})
        pending_data.setdefault("memes", []).append(item)
        save_json("pending.json", pending_data)
        waiting_for.pop(uid, None)
        await message.answer("–ú–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return


    # ADMIN: –¥–æ–¥–∞—Ç–∏ –º–µ–º –æ–¥—Ä–∞–∑—É
    if state == "admin_add_meme" and message.from_user.id == AUTHOR_ID:
        if message.photo:
            memes_data.append({"type":"photo", "file_id": message.photo[-1].file_id, "text": message.caption or ""})
        elif message.video:
            memes_data.append({"type":"video", "file_id": message.video.file_id, "text": message.caption or ""})
        elif message.voice:
            memes_data.append({"type":"voice", "file_id": message.voice.file_id, "text": ""})
        elif message.video_note:
            memes_data.append({"type":"video_note", "file_id": message.video_note.file_id, "text": ""})
        else:
            memes_data.append(text)
        save_json("memes.json", memes_data)
        waiting_for.pop(uid, None)
        await message.answer("–ú–µ–º –¥–æ–¥–∞–Ω–æ.", reply_markup=admin_menu_keyboard())
        return


    # ADMIN: –¥–æ–¥–∞—Ç–∏ –º–µ–Ω—é (—Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ)
    if state == "admin_add_menu" and message.from_user.id == AUTHOR_ID:
        today = str(datetime.date.today())
        if message.photo:
            menu_data[today] = {"text": message.caption or "", "photo": message.photo[-1].file_id}
        else:
            menu_data[today] = {"text": text, "photo": None}
        save_json("menu.json", menu_data)
        waiting_for.pop(uid, None)
        await message.answer("–ú–µ–Ω—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.", reply_markup=admin_menu_keyboard())
        return

    # ADMIN: –¥–æ–¥–∞—Ç–∏ —Å–æ—Ü–º–µ—Ä–µ–∂—É
    if state == "admin_add_social" and message.from_user.id == AUTHOR_ID:
        try:
            name, link = [x.strip() for x in text.split("|",1)]
            socials_data[name] = link
            save_json("socials.json", socials_data)
            waiting_for.pop(uid, None)
            await message.answer(f"–°–æ—Ü–º–µ—Ä–µ–∂–∞ '{name}' –¥–æ–¥–∞–Ω–∞.", reply_markup=admin_menu_keyboard())
        except Exception:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏: –ù–∞–∑–≤–∞ | –ü–æ—Å–∏–ª–∞–Ω–Ω—è")
        return

    # ADMIN: –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É (–ø–æ –Ω–æ–º–µ—Ä—É)
    if state == "admin_delete_news" and message.from_user.id == AUTHOR_ID:
        try:
            idx = int(text.strip()) - 1
            removed = news_data.pop(idx)
            save_json("news.json", news_data)
            waiting_for.pop(uid, None)
            await message.answer(f"–í–∏–¥–∞–ª–µ–Ω–æ –Ω–æ–≤–∏–Ω—É: {removed}", reply_markup=admin_menu_keyboard())
        except Exception:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")
        return

    # ADMIN: –≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–º (–ø–æ –Ω–æ–º–µ—Ä—É)
    if state == "admin_delete_meme" and message.from_user.id == AUTHOR_ID:
        try:
            idx = int(text.strip()) - 1
            removed = memes_data.pop(idx)
            save_json("memes.json", memes_data)
            waiting_for.pop(uid, None)
            await message.answer(f"–í–∏–¥–∞–ª–µ–Ω–æ –º–µ–º #{idx+1}.", reply_markup=admin_menu_keyboard())
        except Exception:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä.")
        return

    # USER: –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ü—ñ–Ω–∫—É (–º–æ–∂–Ω–∞ —Ñ–æ—Ç–æ+—Ç–µ–∫—Å—Ç)
    if state == "submit_grade":
        item = {"from_id": int(message.from_user.id), "from_username": message.from_user.username, "time": now_str()}
        if message.photo:
            item.update({"type":"photo", "file_id": message.photo[-1].file_id, "text": message.caption or ""})
        elif message.video:
            item.update({"type":"video", "file_id": message.video.file_id, "text": message.caption or ""})
        elif message.voice:
            item.update({"type":"voice", "file_id": message.voice.file_id, "text": ""})
        elif message.video_note:
            item.update({"type":"video_note", "file_id": message.video_note.file_id, "text": ""})
        else:
            item.update({"type":"text", "text": text})
        pending_data.setdefault("score_requests", []).append(item)
        save_json("pending.json", pending_data)
        waiting_for.pop(uid, None)
        await message.answer("–ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return


    # USER: contact author (–ª–∏—à–µ —Ñ–æ—Ä–º—É—î pending)
    if state == "contact_author":
        item = {"from_id": int(message.from_user.id), "from_username": message.from_user.username, "time": now_str()}
        if message.photo:
            item.update({"type":"photo", "file_id": message.photo[-1].file_id, "text": message.caption or ""})
        elif message.video:
            item.update({"type":"video", "file_id": message.video.file_id, "text": message.caption or ""})
        elif message.voice:
            item.update({"type":"voice", "file_id": message.voice.file_id, "text": ""})
        elif message.video_note:
            item.update({"type":"video_note", "file_id": message.video_note.file_id, "text": ""})
        else:
            item.update({"type":"text", "text": text})
        pending_data.setdefault("contact", []).append(item)
        save_json("pending.json", pending_data)
        waiting_for.pop(uid, None)
        await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))
        return

    if state == "admin_remove_score_user" and message.from_user.id == AUTHOR_ID:
        target = text.strip()
        if target.startswith("@"):
            target = target[1:]
            # —à—É–∫–∞—î–º–æ –ø–æ username
            found = None
            for k,v in scores_data.items():
                # —Ç—É—Ç —Ç–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –∑–≤'—è–∑–∫—É uid->username —É —Å–µ–±–µ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ
                # –ø–æ–∫–∏ —â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ user_class
                if user_class.get(k) and message.from_user.username == target:
                    found = k
            if not found:
                await message.answer("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ username —É –±–∞–∑—ñ.")
                return
            target_id = found
        else:
            target_id = target

        waiting_for[uid] = {"action":"admin_remove_score_value", "target_id": target_id}
        await message.answer(
            f"–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω—è—Ç–∏ —É {target_id}:",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )
        return

    # ADMIN: –∑–Ω—è—Ç–∏ –±–∞–ª–∏ ‚Äî –≤–≤–æ–¥–∏–º–æ —Å—É–º—É
    if isinstance(state, dict) and state.get("action") == "admin_remove_score_value" and message.from_user.id == AUTHOR_ID:
        try:
            val = float(text.strip())
        except Exception:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–º–æ–∂–µ –±—É—Ç–∏ –¥—Ä–æ–±–æ–≤–µ).")
            return

        target_id = str(state["target_id"])
        scores_data[target_id] = round(scores_data.get(target_id, 0) - val, 2)
        if scores_data[target_id] < 0:
            scores_data[target_id] = 0
        save_json("scores.json", scores_data)

        waiting_for.pop(uid, None)
        try:
            await bot.send_message(int(target_id), f"–ê–¥–º—ñ–Ω –∑–Ω—è–≤ —É —Ç–µ–±–µ {val}‚≠ê. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {scores_data[target_id]}‚≠ê")
        except Exception:
            pass

        await message.answer(f"–ó–Ω—è—Ç–æ {val}‚≠ê —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_id}. –ë–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä: {scores_data[target_id]}‚≠ê", reply_markup=admin_menu_keyboard())
        return
    
    # ADMIN: –ø—ñ—Å–ª—è approve_score ‚Äî –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤
    
    if isinstance(state, dict) and state.get("action") == "admin_confirm_score" and message.from_user.id == AUTHOR_ID:
        try:
            val = float(text.strip())
        except Exception:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–º–æ–∂–µ –±—É—Ç–∏ –¥—Ä–æ–±–æ–≤–µ).")
            return
        target_id = str(state["target_id"])
        scores_data[target_id] = round(scores_data.get(target_id, 0) + val, 2)
        save_json("scores.json", scores_data)
        waiting_for.pop(uid, None)
        try:
            await bot.send_message(int(target_id), f"–ê–¥–º—ñ–Ω –Ω–∞—Ä–∞—Ö—É–≤–∞–≤ —Ç–æ–±—ñ {val}‚≠ê. –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {scores_data[target_id]}‚≠ê")
        except Exception:
            pass
        # –ü—ñ—Å–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è ‚Äî —è–∫—â–æ —â–µ –∑–∞—è–≤–∫–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å, –ø–æ–∫–∞–∂–µ–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É, —ñ–Ω–∞–∫—à–µ –Ω–∞–∑–∞–¥ –≤ –∞–¥–º—ñ–Ω –º–µ–Ω—é
        if pending_data.get("score_requests"):
            await send_next_pending_score_to_admin(message.from_user.id)
        else:
            await message.answer(f"–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ {val}‚≠ê –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {state.get('target_display')}.", reply_markup=admin_menu_keyboard())
        return

    # ADMIN: reply contact ‚Äî –∞–¥–º—ñ–Ω –≤–≤—ñ–≤ —Ç–µ–∫—Å—Ç/–ø—Ä–∏—î–¥–Ω–∞–≤ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if isinstance(state, dict) and state.get("action") == "admin_reply_contact" and message.from_user.id == AUTHOR_ID:
        target_id = state.get("target_id")
        # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ –≤–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑ queue
        try:
            if message.photo:
                await bot.send_photo(target_id, message.photo[-1].file_id, caption=message.caption or "")
            elif message.video:
                await bot.send_video(target_id, message.video.file_id, caption=message.caption or "")
            elif message.voice:
                # —è–∫—â–æ –∞–¥–º—ñ–Ω –¥–æ–¥–∞–≤ —Ç–µ–∫—Å—Ç —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ ‚Äî –Ω–∞–¥—ñ—à–ª–µ–º–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –≥–æ–ª–æ—Å–æ–º
                if message.text:
                    await bot.send_message(target_id, message.text)
                await bot.send_voice(target_id, message.voice.file_id)
            elif message.video_note:
                if message.text:
                    await bot.send_message(target_id, message.text)
                await bot.send_video_note(target_id, message.video_note.file_id)
            else:
                await bot.send_message(target_id, text or "")
            # –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ pending
            if pending_data.get("contact"):
                pending_data["contact"].pop(0)
                save_json("pending.json", pending_data)
        except Exception:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞).")

        waiting_for.pop(uid, None)
        # –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
        if pending_data.get("contact"):
            await send_next_pending_contact_to_admin(message.from_user.id)
        else:
            await message.answer("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.", reply_markup=admin_menu_keyboard())
        return

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—ñ–≤–ø–∞–ª–æ:
    await message.answer("–ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.ü§∑‚Äç‚ôÇÔ∏è", reply_markup=main_menu(message.from_user.id == AUTHOR_ID))

# ========== –ê–≤—Ç–æ—Å–µ–π–≤ ==========
async def autosave_loop():
    while True:
        save_json("schedule.json", schedule_data)
        save_json("news.json", news_data)
        save_json("socials.json", socials_data)
        save_json("memes.json", memes_data)
        save_json("pending.json", pending_data)
        save_json("scores.json", scores_data)
        save_json("menu.json", menu_data)
        await asyncio.sleep(15)





async def handle(request):
    return web.Response(text="‚úÖ Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 10000)))
    await site.start()



# ========== –ó–∞–ø—É—Å–∫ ==========
# async def main():
#     print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
#     asyncio.create_task(autosave_loop())
#     await dp.start_polling(bot)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    asyncio.create_task(autosave_loop())
    asyncio.create_task(start_web_server())  # üëà –¥–æ–¥–∞–ª–∏
    await dp.start_polling(bot)




if __name__ == "__main__":
    asyncio.run(main())
